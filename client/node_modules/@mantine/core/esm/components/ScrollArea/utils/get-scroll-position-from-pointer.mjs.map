{"version":3,"file":"get-scroll-position-from-pointer.mjs","sources":["../../../../src/components/ScrollArea/utils/get-scroll-position-from-pointer.ts"],"sourcesContent":["import type { Sizes } from '../ScrollArea.types';\nimport { getThumbSize } from './get-thumb-size';\nimport { linearScale } from './linear-scale';\n\nexport function getScrollPositionFromPointer(\n  pointerPos: number,\n  pointerOffset: number,\n  sizes: Sizes,\n  dir: 'ltr' | 'rtl' = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange as [number, number]);\n  return interpolate(pointerPos);\n}\n"],"names":[],"mappings":";;;;AAEO,SAAS,4BAA4B,CAAC,UAAU,EAAE,aAAa,EAAE,KAAK,EAAE,GAAG,GAAG,KAAK,EAAE;AAC5F,EAAE,MAAM,WAAW,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;AAC1C,EAAE,MAAM,WAAW,GAAG,WAAW,GAAG,CAAC,CAAC;AACtC,EAAE,MAAM,MAAM,GAAG,aAAa,IAAI,WAAW,CAAC;AAC9C,EAAE,MAAM,kBAAkB,GAAG,WAAW,GAAG,MAAM,CAAC;AAClD,EAAE,MAAM,aAAa,GAAG,KAAK,CAAC,SAAS,CAAC,YAAY,GAAG,MAAM,CAAC;AAC9D,EAAE,MAAM,aAAa,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,GAAG,kBAAkB,CAAC;AAC/F,EAAE,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC;AACtD,EAAE,MAAM,WAAW,GAAG,GAAG,KAAK,KAAK,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACjF,EAAE,MAAM,WAAW,GAAG,WAAW,CAAC,CAAC,aAAa,EAAE,aAAa,CAAC,EAAE,WAAW,CAAC,CAAC;AAC/E,EAAE,OAAO,WAAW,CAAC,UAAU,CAAC,CAAC;AACjC;;"}