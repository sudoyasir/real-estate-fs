'use client';
import React, { useEffect } from 'react';
import { useId, useUncontrolled } from '@mantine/hooks';
import { filterPickedValues } from './filter-picked-values.mjs';
import { getParsedComboboxData } from '../Combobox/get-parsed-combobox-data/get-parsed-combobox-data.mjs';
import { getOptionsLockup } from '../Combobox/get-options-lockup/get-options-lockup.mjs';
import { useCombobox } from '../Combobox/use-combobox/use-combobox.mjs';
import { Pill } from '../Pill/Pill.mjs';
import { Combobox } from '../Combobox/Combobox.mjs';
import { PillsInput } from '../PillsInput/PillsInput.mjs';
import { OptionsDropdown } from '../Combobox/OptionsDropdown/OptionsDropdown.mjs';
import { InputBase } from '../InputBase/InputBase.mjs';
import { factory } from '../../core/factory/factory.mjs';
import { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';
import { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';
import { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';
import { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const defaultProps = {
  maxValues: Infinity,
  withCheckIcon: true,
  checkIconPosition: "left"
};
const MultiSelect = factory((_props, ref) => {
  const props = useProps("MultiSelect", defaultProps, _props);
  const _a = props, {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    size,
    value,
    defaultValue,
    onChange,
    onKeyDown,
    variant,
    data,
    dropdownOpened,
    defaultDropdownOpened,
    onDropdownOpen,
    onDropdownClose,
    selectFirstOptionOnChange,
    onOptionSubmit,
    comboboxProps,
    filter,
    limit,
    withScrollArea,
    maxDropdownHeight,
    searchValue,
    defaultSearchValue,
    onSearchChange,
    readOnly,
    disabled,
    onFocus,
    onBlur,
    onPaste,
    radius,
    rightSection,
    rightSectionWidth,
    rightSectionPointerEvents,
    rightSectionProps,
    leftSection,
    leftSectionWidth,
    leftSectionPointerEvents,
    leftSectionProps,
    inputContainer,
    inputWrapperOrder,
    withAsterisk,
    labelProps,
    descriptionProps,
    errorProps,
    wrapperProps,
    description,
    label,
    error,
    maxValues,
    searchable,
    nothingFoundMessage,
    withCheckIcon,
    checkIconPosition,
    hidePickedOptions,
    withErrorStyles,
    name,
    form,
    id,
    clearable,
    clearButtonProps,
    hiddenInputProps,
    placeholder
  } = _a, others = __objRest(_a, [
    "classNames",
    "className",
    "style",
    "styles",
    "unstyled",
    "vars",
    "size",
    "value",
    "defaultValue",
    "onChange",
    "onKeyDown",
    "variant",
    "data",
    "dropdownOpened",
    "defaultDropdownOpened",
    "onDropdownOpen",
    "onDropdownClose",
    "selectFirstOptionOnChange",
    "onOptionSubmit",
    "comboboxProps",
    "filter",
    "limit",
    "withScrollArea",
    "maxDropdownHeight",
    "searchValue",
    "defaultSearchValue",
    "onSearchChange",
    "readOnly",
    "disabled",
    "onFocus",
    "onBlur",
    "onPaste",
    "radius",
    "rightSection",
    "rightSectionWidth",
    "rightSectionPointerEvents",
    "rightSectionProps",
    "leftSection",
    "leftSectionWidth",
    "leftSectionPointerEvents",
    "leftSectionProps",
    "inputContainer",
    "inputWrapperOrder",
    "withAsterisk",
    "labelProps",
    "descriptionProps",
    "errorProps",
    "wrapperProps",
    "description",
    "label",
    "error",
    "maxValues",
    "searchable",
    "nothingFoundMessage",
    "withCheckIcon",
    "checkIconPosition",
    "hidePickedOptions",
    "withErrorStyles",
    "name",
    "form",
    "id",
    "clearable",
    "clearButtonProps",
    "hiddenInputProps",
    "placeholder"
  ]);
  const _id = useId(id);
  const parsedData = getParsedComboboxData(data);
  const optionsLockup = getOptionsLockup(parsedData);
  const combobox = useCombobox({
    opened: dropdownOpened,
    defaultOpened: defaultDropdownOpened,
    onDropdownOpen,
    onDropdownClose: () => {
      onDropdownClose == null ? void 0 : onDropdownClose();
      combobox.resetSelectedOption();
    }
  });
  const {
    styleProps,
    rest: _b
  } = extractStyleProps(others), _c = _b, rest = __objRest(_c, ["type"]);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: [],
    onChange
  });
  const [_searchValue, setSearchValue] = useUncontrolled({
    value: searchValue,
    defaultValue: defaultSearchValue,
    finalValue: "",
    onChange: onSearchChange
  });
  const getStyles = useStyles({
    name: "MultiSelect",
    classes: {},
    props,
    classNames,
    styles,
    unstyled
  });
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    props,
    styles,
    classNames
  });
  const handleInputKeydown = (event) => {
    onKeyDown == null ? void 0 : onKeyDown(event);
    if (event.key === "Backspace" && _searchValue.length === 0 && _value.length > 0) {
      setValue(_value.slice(0, _value.length - 1));
    }
  };
  const values = _value.map((item, index) => {
    var _a2;
    return /* @__PURE__ */ React.createElement(
      Pill,
      __spreadValues({
        key: `${item}-${index}`,
        withRemoveButton: !readOnly,
        onRemove: () => setValue(_value.filter((i) => item !== i)),
        unstyled
      }, getStyles("pill")),
      ((_a2 = optionsLockup[item]) == null ? void 0 : _a2.label) || item
    );
  });
  useEffect(() => {
    if (selectFirstOptionOnChange) {
      combobox.selectFirstOption();
    }
  }, [selectFirstOptionOnChange, _value]);
  const clearButton = clearable && _value.length > 0 && !disabled && !readOnly && /* @__PURE__ */ React.createElement(
    Combobox.ClearButton,
    __spreadProps(__spreadValues({
      size
    }, clearButtonProps), {
      onClear: () => {
        setValue([]);
        setSearchValue("");
      }
    })
  );
  const filteredData = filterPickedValues({ data: parsedData, value: _value });
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    Combobox,
    __spreadValues({
      store: combobox,
      classNames: resolvedClassNames,
      styles: resolvedStyles,
      unstyled,
      size,
      readOnly,
      __staticSelector: "MultiSelect",
      onOptionSubmit: (val) => {
        onOptionSubmit == null ? void 0 : onOptionSubmit(val);
        setSearchValue("");
        combobox.updateSelectedOptionIndex("selected");
        if (_value.includes(optionsLockup[val].value)) {
          setValue(_value.filter((v) => v !== optionsLockup[val].value));
        } else if (_value.length < maxValues) {
          setValue([..._value, optionsLockup[val].value]);
        }
      }
    }, comboboxProps),
    /* @__PURE__ */ React.createElement(Combobox.DropdownTarget, null, /* @__PURE__ */ React.createElement(
      PillsInput,
      __spreadProps(__spreadValues({}, styleProps), {
        __staticSelector: "MultiSelect",
        classNames: resolvedClassNames,
        styles: resolvedStyles,
        unstyled,
        size,
        className,
        style,
        variant,
        disabled,
        radius,
        rightSection: rightSection || clearButton || /* @__PURE__ */ React.createElement(Combobox.Chevron, { size, error, unstyled }),
        rightSectionPointerEvents: rightSectionPointerEvents || clearButton ? "all" : "none",
        rightSectionWidth,
        rightSectionProps,
        leftSection,
        leftSectionWidth,
        leftSectionPointerEvents,
        leftSectionProps,
        inputContainer,
        inputWrapperOrder,
        withAsterisk,
        labelProps,
        descriptionProps,
        errorProps,
        wrapperProps,
        description,
        label,
        error,
        multiline: true,
        withErrorStyles,
        __stylesApiProps: __spreadProps(__spreadValues({}, props), { multiline: true }),
        pointer: !searchable,
        onClick: () => searchable ? combobox.openDropdown() : combobox.toggleDropdown(),
        id: _id
      }),
      /* @__PURE__ */ React.createElement(Pill.Group, __spreadValues({ disabled, unstyled }, getStyles("pillsList")), values, /* @__PURE__ */ React.createElement(Combobox.EventsTarget, null, /* @__PURE__ */ React.createElement(
        PillsInput.Field,
        __spreadProps(__spreadValues(__spreadProps(__spreadValues({}, rest), {
          ref,
          id: _id,
          placeholder,
          type: !searchable && !placeholder ? "hidden" : "visible"
        }), getStyles("inputField")), {
          unstyled,
          onFocus: (event) => {
            onFocus == null ? void 0 : onFocus(event);
            searchable && combobox.openDropdown();
          },
          onBlur: (event) => {
            onBlur == null ? void 0 : onBlur(event);
            combobox.closeDropdown();
            searchable && combobox.closeDropdown();
            setSearchValue("");
          },
          onKeyDown: handleInputKeydown,
          value: _searchValue,
          onChange: (event) => {
            setSearchValue(event.currentTarget.value);
            searchable && combobox.openDropdown();
            selectFirstOptionOnChange && combobox.selectFirstOption();
          },
          disabled,
          readOnly: readOnly || !searchable,
          pointer: !searchable
        })
      )))
    )),
    /* @__PURE__ */ React.createElement(
      OptionsDropdown,
      {
        data: hidePickedOptions ? filteredData : parsedData,
        hidden: readOnly || disabled,
        filter,
        search: _searchValue,
        limit,
        hiddenWhenEmpty: !searchable || !nothingFoundMessage || hidePickedOptions && filteredData.length === 0 && _searchValue.trim().length === 0,
        withScrollArea,
        maxDropdownHeight,
        filterOptions: searchable,
        value: _value,
        checkIconPosition,
        withCheckIcon,
        nothingFoundMessage,
        unstyled,
        labelId: `${_id}-label`
      }
    )
  ), /* @__PURE__ */ React.createElement(
    "input",
    __spreadValues({
      type: "hidden",
      name,
      value: _value.join(","),
      form,
      disabled
    }, hiddenInputProps)
  ));
});
MultiSelect.classes = __spreadValues(__spreadValues({}, InputBase.classes), Combobox.classes);
MultiSelect.displayName = "@mantine/core/MultiSelect";

export { MultiSelect };
//# sourceMappingURL=MultiSelect.mjs.map
